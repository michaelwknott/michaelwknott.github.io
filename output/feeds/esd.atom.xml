<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Michael Knott - ESD</title><link href="/" rel="alternate"></link><link href="/feeds/esd.atom.xml" rel="self"></link><id>/</id><updated>2023-07-05T12:00:00+01:00</updated><entry><title>Monitoring and Prescribing Individualised Conditioning Sessions: Part 2</title><link href="/monitoring-and-prescribing-individualised-conditioning-sessions-part-2.html" rel="alternate"></link><published>2023-07-05T12:00:00+01:00</published><updated>2023-07-05T12:00:00+01:00</updated><author><name>Michael Knott</name></author><id>tag:None,2023-07-05:/monitoring-and-prescribing-individualised-conditioning-sessions-part-2.html</id><summary type="html">&lt;p&gt;Project Set-up&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a href="https://michaelwknott.github.io/monitoring-and-prescribing-individualised-conditioning-sessions-part-1.html"&gt;part 1&lt;/a&gt; I outlined the rationale for the project and my plans for structuring the project using a three-layered architecture. Today's post will focus on my project set-up workflow.&lt;/p&gt;
&lt;h2&gt;Project Set-up&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a new virtual environment for the project and upgrade pip, setuptools and wheel.&lt;/p&gt;
&lt;p&gt;```
esd$ python -m venv .venv --prompt .&lt;/p&gt;
&lt;p&gt;esd/$ source .venv/bin/activate&lt;/p&gt;
&lt;p&gt;(esd) esd/$ python -m pip install -U pip setuptools wheel
```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initiate a git repository in the project directory for version control and add a &lt;code&gt;.gitignore&lt;/code&gt; file. Add the &lt;code&gt;.venv&lt;/code&gt; directory to the &lt;code&gt;.gitignore&lt;/code&gt; file to avoid commiting the virtual environment to version control.&lt;/p&gt;
&lt;p&gt;```
(esd) esd/$ git init&lt;/p&gt;
&lt;p&gt;(esd) esd/$ echo .venv &amp;gt; .gitignore
```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;code&gt;pip-tools&lt;/code&gt; to manage dependencies. I use pip-tools as it provides a detailed requirements file outlining the source of each dependency installed in the project.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(esd) esd/$ python -m pip install pip-tools&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;requirements.in&lt;/code&gt; and &lt;code&gt;requirements-dev.in&lt;/code&gt; file for project and development dependencies respectively.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(esd) esd/$ touch requirements.in requirements-dev.in&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Constrain the development dependencies with the main project dependencies to avoid dependency conflicts.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(esd) esd/$ echo -c requirements.txt &amp;gt;&amp;gt; requirements-dev.in&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the required development dependencies to &lt;code&gt;requirements-dev.in&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(esd) esd/$ echo -e "pre-commit\nblack\nruff\nmypy\npytest" &amp;gt;&amp;gt; requirements-dev.in&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the required project dependencies to &lt;code&gt;requirements.in&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(esd) esd/$ echo -e "fastapi[all]\nSQLAlchemy" &amp;gt;&amp;gt; requirements.in&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compile the requirements.txt and requirements-dev.txt files. Ensure to compile the requirements.txt first as requirements-dev.in will use this as the constraint file.&lt;/p&gt;
&lt;p&gt;```
(esd) esd/$ pip-compile requirements.in&lt;/p&gt;
&lt;p&gt;(esd) esd/$ pip-compile requirements-dev.in
```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install dependencies within the virtual environment.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(esd) esd/$ python -m pip install -r requirements.txt -r requirements-dev.txt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;pyproject.toml&lt;/code&gt; file and configure development dependencies. I've included defaults from Ruff in the &lt;code&gt;pyproject.toml&lt;/code&gt; configuration to be explicit about settings. &lt;/p&gt;
&lt;p&gt;```
(esd) esd/$ touch pyproject.toml&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;pyproject.toml&lt;/h1&gt;
&lt;p&gt;[tool.mypy]
python_version = 3.11
warn_unused_configs = true
warn_return_any = true
disallow_untyped_defs = true
warn_unused_ignores = true
warn_redundant_casts = true
show_error_context = true
pretty = true&lt;/p&gt;
&lt;p&gt;[tool.black]
line-length = 88
target-version = ['py311']&lt;/p&gt;
&lt;p&gt;[tool.ruff]&lt;/p&gt;
&lt;h1&gt;Enable pycodestyle (&lt;code&gt;E&lt;/code&gt;), Pyflakes (&lt;code&gt;F&lt;/code&gt;), pycodestyle warnings (&lt;code&gt;W&lt;/code&gt;),&lt;/h1&gt;
&lt;h1&gt;McCabe complexity (&lt;code&gt;C901&lt;/code&gt;), pep8-naming (&lt;code&gt;N&lt;/code&gt;), pydocstyle (&lt;code&gt;D&lt;/code&gt;),&lt;/h1&gt;
&lt;h1&gt;pyupgrade (&lt;code&gt;UP&lt;/code&gt;) and pylint (&lt;code&gt;PL&lt;/code&gt;).&lt;/h1&gt;
&lt;p&gt;select = ["E", "F", "W", "C901", "N", "D", "UP", "PL"]
ignore = []&lt;/p&gt;
&lt;h1&gt;Allow autofix for all enabled rules (when &lt;code&gt;--fix&lt;/code&gt;) is provided.&lt;/h1&gt;
&lt;p&gt;fixable = ["ALL"]
unfixable = []&lt;/p&gt;
&lt;h1&gt;Exclude a variety of commonly ignored directories.&lt;/h1&gt;
&lt;p&gt;exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "&lt;strong&gt;pypackages&lt;/strong&gt;",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}&lt;/p&gt;
&lt;h1&gt;Same as Black.&lt;/h1&gt;
&lt;p&gt;line-length = 88&lt;/p&gt;
&lt;h1&gt;Allow unused variables when underscore-prefixed.&lt;/h1&gt;
&lt;p&gt;dummy-variable-rgx = "^(&lt;em&gt;+|(&lt;/em&gt;+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"&lt;/p&gt;
&lt;h1&gt;Assume Python 3.11.&lt;/h1&gt;
&lt;p&gt;target-version = "py311"&lt;/p&gt;
&lt;p&gt;[tool.ruff.isort]&lt;/p&gt;
&lt;h1&gt;Placeholder for future configuration.&lt;/h1&gt;
&lt;p&gt;[tool.ruff.mccabe]&lt;/p&gt;
&lt;h1&gt;Flag errors (&lt;code&gt;C901&lt;/code&gt;) whenever the complexity level exceeds 10.&lt;/h1&gt;
&lt;p&gt;max-complexity = 10&lt;/p&gt;
&lt;p&gt;[tool.ruff.pep8-naming]&lt;/p&gt;
&lt;h1&gt;Placeholder for future configuration.&lt;/h1&gt;
&lt;p&gt;[tool.ruff.pydocstyle]&lt;/p&gt;
&lt;h1&gt;Use Google-style docstrings.&lt;/h1&gt;
&lt;p&gt;convention = "google"&lt;/p&gt;
&lt;p&gt;[tool.ruff.pylint]&lt;/p&gt;
&lt;h1&gt;Placeholder for future configuration.&lt;/h1&gt;
&lt;p&gt;[tool.ruff.pyupgrade]&lt;/p&gt;
&lt;h1&gt;Placeholder for future configuration.&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; to configure &lt;code&gt;pre-commit&lt;/code&gt;. Running &lt;code&gt;pre-commit&lt;/code&gt; before each git commit ensures code quality and consistency across the project.&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1&gt;.pre-commit-config.yaml&lt;/h1&gt;
&lt;p&gt;repos:
-   repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
    -   id: check-yaml
    -   id: end-of-file-fixer
    -   id: trailing-whitespace
-   repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
    -   id: black
        args: ['--config=./pyproject.toml']
-   repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: v0.0.276
    hooks:
    - id: ruff
-   repo: https://github.com/pre-commit/mirrors-mypy
    rev: 'v1.4.1'
    hooks:
    -   id: mypy
        args: [--no-strict-optional, --ignore-missing-imports]
        additional_dependencies: [
        fastapi==0.99.1,
        sqlalchemy==2.0.17,
        typing-extensions==4.7.1
        ]
```&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use the &lt;code&gt;pre-commit&lt;/code&gt; autoupdate command to update hooks to the latest version and install the git hook scripts.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;```
(esd) esd/$ pre-commit autoupdate&lt;/p&gt;
&lt;p&gt;(esd) esd/$ pre-commit install
```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;.editorconfig&lt;/code&gt; file to ensure consistency in formatting when collaborating with other developers.&lt;/p&gt;
&lt;p&gt;```
(esd) esd/$ touch .editorcongig&lt;/p&gt;
&lt;h1&gt;.editorconfig&lt;/h1&gt;
&lt;p&gt;root = true
[&lt;em&gt;]
charset = utf-8
end_of_line = lf
indent_style = space
indent_size = 4
trim_trailing_whitespace = true
insert_final_newline = true
[&lt;/em&gt;.html]
indent_size = 2
```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure local settings for VSCode. I currently use VSCode as my text editor/IDE.&lt;/p&gt;
&lt;p&gt;```
(esd) esd/$ touch .vscode/settings.json&lt;/p&gt;
&lt;h1&gt;.vscode/settings.json&lt;/h1&gt;
&lt;p&gt;{
    "python.formatting.provider": "black",
    "[python]": {
        "editor.formatOnSave": true,
    },
    "editor.codeActionsOnSave": {
        "source.organizeImports": true
    },
    "editor.rulers": [
        88,
    ],
    "python.analysis.typeCheckingMode": "strict",
}
```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create project structure. I add &lt;code&gt;athlete.py&lt;/code&gt; and &lt;code&gt;test_athlete.py&lt;/code&gt; files as placeholders in the &lt;code&gt;esd&lt;/code&gt; and &lt;code&gt;tests&lt;/code&gt; directories respectively.&lt;/p&gt;
&lt;p&gt;```
(esd) esd/$  mkdir esd tests &amp;amp;&amp;amp; touch esd/athlete.py tests/test_athlete.py&lt;/p&gt;
&lt;h1&gt;Project tree after adding esd and tests directories&lt;/h1&gt;
&lt;p&gt;esd
├── .venv
├── .vscode
│   └──settings.json 
├── esd
│   └──athlete.py
├── tests
│   └──test_athlete.py
├── .editorconfig
├── .gitignore
├── .pre-commit-config.yaml
├── pyproject.toml
├── requirements-dev.in
├── requirements-dev.txt
├── requirements.in
└── requirements.txt
```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a GitHub repository with &lt;code&gt;README.md&lt;/code&gt; and &lt;code&gt;LICENSE&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;![Creating a GitHub Repository]({static}/images/create-github-repo.png "Creating a GitHub repository"){style="display: block; margin: 0 auto"}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Link &lt;code&gt;esd&lt;/code&gt; project to GitHub repository, add and commit project set-up changes and push changes to GitHub.&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1&gt;Add files to staging in local repo&lt;/h1&gt;
&lt;p&gt;(esd) esd/$ git add .&lt;/p&gt;
&lt;h1&gt;Commit files in local repo&lt;/h1&gt;
&lt;p&gt;(esd) esd/$ git commit -m "Project set-up"&lt;/p&gt;
&lt;h1&gt;Link local repository with remote repository on GitHub&lt;/h1&gt;
&lt;p&gt;(esd) esd/$ git remote add origin git@github.com:michaelwknott/esd.git&lt;/p&gt;
&lt;h1&gt;Check the link between repositories has worked&lt;/h1&gt;
&lt;p&gt;(esd) esd/$ git remote -v&lt;/p&gt;
&lt;h1&gt;Change the name of &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;(esd) esd/$ git branch -m main&lt;/p&gt;
&lt;h1&gt;Rebase local repository with the remote main branch. The local repository doesn't have &lt;code&gt;README.md&lt;/code&gt; and &lt;code&gt;LICENSE&lt;/code&gt; and needs these changes before pushing to the remote repository&lt;/h1&gt;
&lt;p&gt;(esd) esd/$ git pull origin main --rebase&lt;/p&gt;
&lt;h1&gt;Push changes in local repository to GitHub&lt;/h1&gt;
&lt;p&gt;(esd) esd/$ git push origin main 
```&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The final project structure looks as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;```
esd
├── .venv
├── .vscode
│   └──settings.json 
├── esd
│   └──athlete.py
├── tests
│   └──test_athlete.py
├── .editorconfig
├── .gitignore
├── .pre-commit-config.yaml
├── LICENSE
├── README.md
├── pyproject.toml
├── requirements-dev.in
├── requirements-dev.txt
├── requirements.in
└── requirements.txt
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="ESD"></category><category term="projects"></category><category term="esd"></category></entry><entry><title>Monitoring and Prescribing Individualised Conditioning Sessions: Part 1</title><link href="/monitoring-and-prescribing-individualised-conditioning-sessions-part-1.html" rel="alternate"></link><published>2023-06-23T11:30:00+01:00</published><updated>2023-06-23T11:30:00+01:00</updated><author><name>Michael Knott</name></author><id>tag:None,2023-06-23:/monitoring-and-prescribing-individualised-conditioning-sessions-part-1.html</id><summary type="html">&lt;p&gt;Project Overview&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Upskilling in Python&lt;/h2&gt;
&lt;p&gt;I've been using Python for approximately two years. I feel comfortable with the basics and creating projects for myself. To take the next step I believe I need to create projects which allow collaboration with other developers and involve users other than myself.&lt;/p&gt;
&lt;p&gt;I've recently been reading &lt;a href="https://thepythonpro.com/"&gt;Practices of the Python Pro&lt;/a&gt; by Dane Hillard and &lt;a href="https://www.cosmicpython.com/book/preface.html"&gt;Architecture Patterns with Python&lt;/a&gt; by Harry Percival and Bob Gregory. Both books outline key principles, techniques and design patterns for developing Python applications. My plan is to utilise the ideas outlined in these books whilst developing this project. I realise this may result in over-engineering of the project but I believe this is acceptable to further my knowledge and skills.&lt;/p&gt;
&lt;h3&gt;Project Overview&lt;/h3&gt;
&lt;p&gt;Within my current role I support several athletes that require the prescription of conditioning sessions as part of their training plan. To provide effective support involves three tasks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Recording assessment data related to athlete's fitness qualities&lt;/li&gt;
&lt;li&gt;Providing feedback to athletes and coaches on fitness progression&lt;/li&gt;
&lt;li&gt;Prescribing individualised conditioning sessions based upon assessment results&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Currently the process takes a number of steps involving multiple Excel workbooks and a lot of copy and paste.&lt;/p&gt;
&lt;p&gt;The goal of this project is to streamline and automate the process to save me time, whilst also improving my knowledge of software design patterns and techniques. As a first iteration the application will need to provide the following functionality: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Store athlete data for a variety of assessment results (1km, 2km, 3km and 5m times)&lt;/li&gt;
&lt;li&gt;Calculate fitness metrics from assessment results such as Critical Speed, Maximal Aerobic Speed and Maximal Sprinting Speed&lt;/li&gt;
&lt;li&gt;Provided a summary overview of fitness progression for athlete and coaches&lt;/li&gt;
&lt;li&gt;Prescribe conditioning sessions and individualise target distances or target paces for each athlete&lt;/li&gt;
&lt;li&gt;Create a downloadable sheet of each athlete's target distance/pace to be used during conditioning session set-up&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, I want to ensure that I structure the project in an appropriate manner to extend it's functionality at a later date if additional functionality is required.&lt;/p&gt;
&lt;h2&gt;Project Structure&lt;/h2&gt;
&lt;p&gt;I plan to use a three-layered architecture for the project. The three layers consist of a presentation layer to interface with the user, a business model layer containing the logic to implement the required workflows associated with monitoring and prescribing individualised conditioning sessions and a persistance layer to store the required data.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Three layered architecture" src="/images/three_layered_architecture.png" style="display: block; margin: 0 auto" title="Three layered architecture"&gt;&lt;/p&gt;
&lt;p&gt;For the first version of the project I'm going to create an API for the presentation layer and utilise a relational database for the persistence layer. I'm aiming to create an interface between the business logic layer and the presentation and persistence layers to provide the ability to switch between components. For example, create a CLI for the presentation layer or utilise csv files for the persistence layer.&lt;/p&gt;</content><category term="ESD"></category><category term="projects"></category><category term="esd"></category></entry></feed>